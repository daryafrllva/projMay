import React, { useState, useEffect, useRef } from 'react';
import WeekendSignal from './weekendSignal';
import cross from '../../assets/svg/cross.svg';
import plus from '../../assets/svg/plus.svg';
import click from '../../assets/svg/click.svg';
import loadingbot from '../../assets/video/loading-bot.mp4';
import info from '../../assets/svg/info.svg';
import anal from '../../assets/svg/analitics.svg';
import chart1 from '../../assets/svg/chart-1.svg';
import chart2 from '../../assets/svg/chart2.svg';
import chart3 from '../../assets/svg/chart3.svg';
import chart4 from '../../assets/svg/chart4.svg';
import chart5 from '../../assets/svg/chart5.svg';
import chart6 from '../../assets/svg/chart6.svg';
import AUD from '../../assets/svg/AUD.svg';
import CAD from '../../assets/svg/CAD.svg';
import CHF from '../../assets/svg/CHF.svg';
import EUR from '../../assets/svg/EUR.svg';
import GBP from '../../assets/svg/GBP.svg';
import JPY from '../../assets/svg/JPY.svg';
import USD from '../../assets/svg/USD.svg';
import gpt from '../../assets/svg/gpt.svg';
import AIB from '../../assets/svg/AIBOOST.svg';
import AIB2 from '../../assets/svg/AIB2.svg';
import IND from '../../assets/svg/IND.svg';
import PLUSA from '../../assets/svg/PLUSA.svg';
import './signal.css';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const currencyIcons = { AUD, CAD, CHF, EUR, GBP, JPY, USD };
const currencyPairs = ['EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD', 'USDCHF'];

const generateRandomPair = () => {
  const max = 99;
  const min = 60;

  const secondMin = min;
  const secondMax = max;
  const second = Math.floor(Math.random() * (secondMax - secondMin + 1)) + secondMin;

  const targetDifference = 10;
  const firstMin = Math.max(min, second - 15);
  const firstMax = Math.min(second - 5, 99);

  const first = Math.floor(Math.random() * (firstMax - firstMin + 1)) + firstMin;

  return { first, second };
};

const Signal = () => {
  const [isWeekend, setIsWeekend] = useState(false);
  const [isBalanceChecked, setIsBalanceChecked] = useState(false);
  const [balance, setBalance] = useState(null);
  const [isAnalyticsModalOpen, setIsAnalyticsModalOpen] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [expandedSections, setExpandedSections] = useState({});
  const [selectedAI, setSelectedAI] = useState(null);
  const [selectedTime, setSelectedTime] = useState(null);
  const [showChart, setShowChart] = useState(false);
  const [selectedPair, setSelectedPair] = useState(null);
  const [startPrice, setStartPrice] = useState(null);

  const [slidingAverages, setSlidingAverages] = useState(() => {
    const saved = localStorage.getItem('slidingAverages');
    return saved ? JSON.parse(saved) : generateRandomPair();
  });

  const [movementPotential, setMovementPotential] = useState(() => {
    const saved = localStorage.getItem('movementPotential');
    return saved ? JSON.parse(saved) : generateRandomPair();
  });

  const [trendStrength, setTrendStrength] = useState(() => {
    const saved = localStorage.getItem('trendStrength');
    return saved ? JSON.parse(saved) : generateRandomPair();
  });

  const [power, setPower] = useState(() => {
    const saved = localStorage.getItem('power');
    return saved ? JSON.parse(saved) : generateRandomPair();
  });

  const [profile, setProfile] = useState(() => {
    const saved = localStorage.getItem('profile');
    return saved ? JSON.parse(saved) : generateRandomPair();
  });

  const [tolpa, setTolpa] = useState(() => {
    const saved = localStorage.getItem('tolpa');
    return saved ? JSON.parse(saved) : generateRandomPair();
  });

  // –¢–∞–π–º–µ—Ä
  const [timerValue, setTimerValue] = useState(null); 
  const [timeLeft, setTimeLeft] = useState(null); 
  const timerRef = useRef(null);

  // –î–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
  const [result, setResult] = useState(null);
  const [endPrice, setEndPrice] = useState(null);

  useEffect(() => {
    const handleBeforeUnload = () => {
      localStorage.removeItem('slidingAverages');
      localStorage.removeItem('movementPotential');
      localStorage.removeItem('trendStrength');
      localStorage.removeItem('power');
      localStorage.removeItem('profile');
      localStorage.removeItem('tolpa');
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ backend
  useEffect(() => {
    const checkBalance = async () => {
      try {
        const response = await fetch('http://localhost:8000/api/check-client', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
        });

        if (response.ok) {
          const data = await response.json();
          setIsBalanceChecked(true);
          setBalance(data.balance);
          if (data.balance < 10) {
            toast.error('–ù–∞ —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî $10.');
          }
        } else {
          setIsBalanceChecked(true);
          setBalance(0);
          toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      } catch (error) {
        setIsBalanceChecked(true);
        setBalance(0);
        toast.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
      }
    };

    checkBalance();
  }, []);

  useEffect(() => {
    const today = new Date().getDay();
    setIsWeekend(today === 0 || today === 6);
  }, []);

  const toggleModal = () => {
    setIsModalOpen(!isModalOpen);
  };

  const toggleAnalyticsModal = () => {
    setIsAnalyticsModalOpen(!isAnalyticsModalOpen);
  };

  const toggleSection = (section) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  const handleAISelection = (ai) => {
    setSelectedAI(ai);
  };

  const handleTimeSelection = (time) => {
    setSelectedTime(time);
    const minutes = parseInt(time);
    setTimerValue(minutes * 60);
  };

  const [direction, setDirection] = useState('down');

  const fetchRandomPairAndPrice = async () => {
    try {
      const currencyPairs = ['EUR-USD', 'GBP-USD', 'USD-JPY', 'AUD-USD', 'USD-CAD', 'USD-CHF'];
      const randomPair = currencyPairs[Math.floor(Math.random() * currencyPairs.length)];
      setSelectedPair(randomPair);

      const priceResponse = await fetch(`https://api.coinbase.com/v2/prices/${randomPair}/spot`);
      const priceData = await priceResponse.json();
      setStartPrice(parseFloat(priceData.data.amount).toFixed(4));
      setShowChart(true);
      setTimeLeft(timerValue);
      setResult(null);
      setEndPrice(null);
      setDirection(Math.random() < 0.5 ? 'up' : 'down');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  // –¢–∞–π–º–µ—Ä: –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ showChart –∏ timerValue
  useEffect(() => {
    if (showChart && timerValue) {
      setTimeLeft(timerValue);
      setResult(null);
      setEndPrice(null);
      if (timerRef.current) clearInterval(timerRef.current);
      timerRef.current = setInterval(() => {
        setTimeLeft(prev => {
          if (prev === 1) {
            clearInterval(timerRef.current);
            return 0;
          }
          return prev > 0 ? prev - 1 : 0;
        });
      }, 1000);
    }
    return () => clearInterval(timerRef.current);
  }, [showChart, timerValue]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Ç–∞–π–º–µ—Ä–∞
  useEffect(() => {
    if (showChart && timeLeft === 0 && selectedPair && startPrice) {
      const checkResult = async () => {
        try {
          const priceResponse = await fetch(`https://api.coinbase.com/v2/prices/${selectedPair}/spot`);
          const priceData = await priceResponse.json();
          const endPriceValue = parseFloat(priceData.data.amount).toFixed(5);
          setEndPrice(endPriceValue);

          if (parseFloat(endPriceValue) > parseFloat(startPrice)) {
            setResult('win');
          } else if (parseFloat(endPriceValue) < parseFloat(startPrice)) {
            setResult('lose');
          } else {
            setResult('neutral');
          }
        } catch (error) {
          setResult('neutral');
        }
      };
      checkResult();
    }
  }, [timeLeft, showChart, selectedPair, startPrice]);

  const handleNewSignal = () => {
    fetchRandomPairAndPrice();
  };

  const handleResetSignal = () => {
    setShowChart(false);
    setSelectedPair(null);
    setStartPrice(null);
    setSelectedAI(null);
    setSelectedTime(null);
    setTimerValue(null);
    setTimeLeft(null);
    setResult(null);
    setEndPrice(null);
  };

  if (isWeekend) {
    return <WeekendSignal />;
  }

  if (!isBalanceChecked) {
    return (
      <section className='_wrapper_hq2vv_1'>
        <div className='_container_hq2vv_8 _wrapper_1wuj9_1'>
          <div className='_cardWrapper_1wuj9_6'>
            <div className='_card_1wuj9_6'>
              <h2 className='_cardTitle_1wuj9_49'>–£–ø—Å!</h2>
              <p className='_mainText_1wuj9_59'>
                –ù–∞ —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤. üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—É–º–º–∞ ‚Äî $10. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å üí∏ ‚Äî –∏ –≤–ø–µ—Ä–µ–¥ –∫ —É—Å–ø–µ—Ö—É! üöÄ
              </p>
              <p className='_currentBalance_1wuj9_68'>
                –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:
                <span>{balance !== null ? `$${balance}` : '–∑–∞–≥—Ä—É–∑–∫–∞...'}</span>
              </p>
              <div className='_info_1wuj9_87' onClick={toggleModal}>
                ‚ùî –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã
              </div>
            </div>
            <button type='button' className='_button_13fxj_1 _mainButton_1wuj9_26 _action_13fxj_13' disabled>
              <span>–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...</span>
              <img src={click} alt="click" />
            </button>
          </div>
        </div>
        {isModalOpen && (
          <div className='_modal_b50nl_1'>
            <div className='_modalContent_b50nl_28'>
              <div className='_closeBtn_b50nl_42'>
                <img src={cross} alt="cross" onClick={toggleModal} />
              </div>
              <div className='_infoModalContent_1wuj9_98'>
                <div className='_wrapper_1uqbn_1'>
                  <div className='_container_1uqbn_5'>
                    <div
                      className='_title_1uqbn_9'
                      onClick={() => toggleSection('info1')}
                    >
                      –û—Ç–∫—É–¥–∞ —É –≤–∞—Å —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?
                      <img
                        src={plus}
                        alt="plus"
                        className={`_plusImg_1uqbn_22 ${
                          expandedSections['info1'] ? '_plusOpen_1uqbn_30' : ''
                        }`}
                      />
                    </div>
                    <div
                      className={`_expanderContainer_1uqbn_47 ${
                        expandedSections['info1'] ? '_open_1uqbn_54' : ''
                      }`}
                    >
                      <div
                        className={`_expander_1uqbn_47 ${
                          expandedSections['info1'] ? '_open_1uqbn_54' : ''
                        }`}
                      >
                        <div className='_infoModalAccordionCard_1wuj9_118'>
                          <p className='_infoModalText_1wuj9_122'>
                            –ú—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º —Å –±—Ä–æ–∫–µ—Ä–æ–º Pocket Option –≤ —Ä–∞–º–∫–∞—Ö
                            —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –°–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–∏–º
                            –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—è–º, –±—Ä–æ–∫–µ—Ä –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –Ω–∞–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç
                            –≤–∞—à–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–±–æ—Ä–æ—Ç–∞ —Ä–∞–∑ –≤ –≥–æ–¥. –•–æ—Ç–∏–º
                            –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å, —á—Ç–æ —Å –≤–∞—Å –Ω–µ –≤–∑–∏–º–∞—é—Ç—Å—è –Ω–∏–∫–∞–∫–∏–µ
                            –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–ª–∏ –∫–æ–º–∏—Å—Å–∏–∏ ‚Äî –≤—Å–µ —É—Å–ª–æ–≤–∏—è
                            –∫–∞—Å–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –±—Ä–æ–∫–µ—Ä–æ–º.
                          </p>
                          <p className='_text_tjs0j_1 _left_tjs0j_12 _primary_tjs0j_31 _infoModalText_1wuj9_122'>
                            –ï—Å–ª–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é, –º—ã –Ω–µ –ø–æ–ª—É—á–∞–µ–º –Ω–∏–∫–∞–∫–æ–π
                            –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ò–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ
                            –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Ä–µ—Å—É—Ä—Å—É, —Ç–∞–∫
                            –∫–∞–∫ –Ω–∞—à –¥–æ—Ö–æ–¥ –Ω–∞–ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –æ–±–æ—Ä–æ—Ç–∞.
                          </p>
                          <p className='_infoModalText_1wuj9_122'>
                            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏–º –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø—Ä–∞–≤–æ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫
                            –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞–º —Å–∞–º–∏–º
                            –±—Ä–æ–∫–µ—Ä–æ–º. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
                            –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –Ω–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
                            —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.
                          </p>
                          <p className='_text_tjs0j_1 _left_tjs0j_12 _primary_tjs0j_31 _infoModalText_1wuj9_122'>
                            –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –º—ã
                            –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏!
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className='_wrapper_1uqbn_1'>
                  <div className='_container_1uqbn_5'>
                    <div
                      className='_title_1uqbn_9'
                      onClick={() => toggleSection('info2')}
                    >
                      –°–∞–π—Ç –Ω–µ –≤–∏–¥–∏—Ç –±–∞–ª–∞–Ω—Å?
                      <img
                        src={plus}
                        alt="plus"
                        className={`_plusImg_1uqbn_22 ${
                          expandedSections['info2'] ? '_plusOpen_1uqbn_30' : ''
                        }`}
                      />
                    </div>
                    <div
                      className={`_expanderContainer_1uqbn_47 ${
                        expandedSections['info2'] ? '_open_1uqbn_54' : ''
                      }`}
                    >
                      <div
                        className={`_expander_1uqbn_47 ${
                          expandedSections['info2'] ? '_open_1uqbn_54' : ''
                        }`}
                      >
                        <div className='_infoModalAccordionCard_1wuj9_118'>
                          <p className='_mainText_1wuj9_59 _infoModalAccordionCardText_1wuj9_136'>
                            <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –µ—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ
                            –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å, –Ω–æ —Å–∞–π—Ç –≤—Å–µ –µ—â–µ —Å–æ–æ–±—â–∞–µ—Ç –æ
                            –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
                            –º–∏–Ω—É—Ç.
                          </p>
                          <p className='_text_tjs0j_1 _left_tjs0j_12 _attention_tjs0j_36 _infoModalText_1wuj9_122'>
                            –ù–∞–º –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ
                            –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞. –¢–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ,
                            —á—Ç–æ –±–æ–Ω—É—Å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å
                            –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
        <ToastContainer />
      </section>
    );
  }

  if (showChart && selectedPair) {
    const formatTime = (seconds) => {
      const m = Math.floor(seconds / 60).toString().padStart(2, '0');
      const s = (seconds % 60).toString().padStart(2, '0');
      return `${m}:${s}`;
    };

    return (
      <section className='_wrapper_hq2vv_1'>
        <div className='_container_hq2vv_8 _wrapper_18eu1_1'>
          <div className='_tvWrapper_1yk8r_225'>
            <div className='tradingview-widget-container' style={{ height: '600px', width: '100%' }}>
              <iframe
                style={{ height: '100%', width: '100%' }}
                src={`https://www.tradingview.com/widgetembed/?symbol=${selectedPair.replace('-', '')}&interval=1&theme=dark`}
                frameBorder="0"
              ></iframe>
            </div>
            <div className='tradingview-widget-copyright'>
              <a href="https://www.tradingview.com/?utm_source=36signal.com&utm_medium=widget_new&utm_campaign=advanced-chart">
              </a>
            </div>
          </div>
          <p className='_otcWarning_1yk8r_233'>
            –ï—Å–ª–∏ –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–∞ –±—Ä–æ–∫–µ—Ä–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ OTC, –Ω–∞–∂–º–∏—Ç–µ ¬´–°–±—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π.
          </p>
          <div className='_signalVideo_1yk8r_1 _hidden_1yk8r_8'>
            <video className='_video_1yk8r_12'></video>
          </div>
          <div className='_desktopPendingWrapper_1yk8r_400'>
            <div className='_openPricePendingWrapper_1yk8r_44'>
              <p className='_openPricePendingText_1yk8r_51'>
                <span className='_openPrice_1yk8r_44'>–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:</span>
                <span className='_openPriceValue_1yk8r_331'>
                  <span className='_openPricePendingValue_1yk8r_59'>{startPrice}</span>
                </span>
              </p>
            </div>
            <div className='_processContainer_1yk8r_29 _signalWaiting_1yk8r_262'>
              <div className='_topResultContainer_1yk8r_242 _signalWaiting_1yk8r_262'>
                <div className='_signalWrapper_1yk8r_262 _signalWaiting_1yk8r_262'>
                  <p className='_title_1yk8r_36'>
                    <div className='_imagesContainer_1lcee_1'>
                      <span className="_logo_1lcee_7">
                        <img src={currencyIcons[selectedPair.split('-')[0]]} alt={selectedPair.split('-')[0]} />
                      </span>
                      <span className="_logo_1lcee_7">
                        <img src={currencyIcons[selectedPair.split('-')[1]]} alt={selectedPair.split('-')[1]} />
                      </span>
                    </div>
                    <p className='_signalDataInfo_1yk8r_291' style={{ backgroundColor: 'none' }}>
                      <span>{selectedPair}</span>
                      <span className='_signalBuyText_1yk8r_312' style={{
                        color: direction === 'up' ? '#00FF7F' : '#FF4D4D',
                        fontWeight: 700,
                        margin: '0 10px'
                      }}>
                        {direction === 'up' ? '–í–≤–µ—Ä—Ö' : '–í–Ω–∏–∑'}
                      </span>
                      <span>{selectedTime}</span>
                    </p>
                  </p>
                </div>
              </div>
              <div className='_signalAnalytics_1yk8r_163' onClick={toggleAnalyticsModal}>
                <img src={anal} alt="Analitica" />
                –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
              </div>
              {isAnalyticsModalOpen && (
                <div className='_modal_b50nl_1'>
                  <div className='_modalContent_b50nl_28 _analyticsModal_1yk8r_159'>
                    <div className='_closeBtn_b50nl_42' onClick={toggleAnalyticsModal}>
                      <img src={cross} alt="cross" />
                    </div>
                    <div className='_statisticsInnerContainer_1yk8r_111'>
                      <div className='_statisticsCard_1yk8r_127'>
                        <h3>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É:</h3>
                        <div className='_statisticsData_1yk8r_119'>
                          <p>
                            <img src={chart1} alt="chart1" />
                            <span>–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ:
                              <b>{slidingAverages.first}%</b>
                              -
                              <b>{slidingAverages.second}%</b>
                            </span>
                          </p>
                          <p>
                            <img src={chart2} alt="chart2" />
                            <span>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–≤–∏–∂–µ–Ω–∏—è:
                              <b>{movementPotential.first}%</b>
                              -
                              <b>{movementPotential.second}%</b>
                            </span>
                          </p>
                          <p>
                            <img src={chart3} alt="chart3" />
                            <span>–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞:
                              <b>{trendStrength.first}%</b>
                              -
                              <b>{trendStrength.second}%</b>
                            </span>
                          </p>
                        </div>
                      </div>
                      <div className='_statisticsCard_1yk8r_127'>
                        <h3>–û–±—ä—ë–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É:</h3>
                        <div className='_statisticsData_1yk8r_119'>
                          <p>
                            <img src={chart4} alt="chart1" />
                            <span> –°–∏–ª–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:
                              <b> {power.first}%</b>
                              -
                              <b> {power.second}%</b>
                            </span>
                          </p>
                          <p>
                            <img src={chart5} alt="chart1" />
                            <span>–û–±—ä—ë–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:
                              <b> {profile.first}%</b>
                              -
                              <b> {profile.second}%</b>
                            </span>
                          </p>
                          <p>
                            <img src={chart6} alt="chart1" />
                            <span> –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–æ–ª–ø—ã:
                              <b> {tolpa.first}%</b>
                              -
                              <b> {tolpa.second}%</b>
                            </span>
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div className='_progressBarWrapper_1yk8r_395'>
              <p className='_endTimeText_qnld5_32'>–†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑:</p>
              <div className='_wrapper_qnld5_1'>
                <div className='_container_qnld5_10'>
                  <div
                    className='_bar_qnld5_17'
                    style={{
                      width: timerValue
                        ? `${100 - Math.round((timeLeft / timerValue) * 100)}%`
                        : '0%',
                      transition: 'width 1s linear'
                    }}
                  ></div>
                </div>
              </div>
              <p className='_timeText_qnld5_22'>{timeLeft !== null ? formatTime(timeLeft) : ''}</p>
              {result && (
                <div style={{ textAlign: 'center', margin: '40px 0 24px 0' }}>
                  <span
                    style={{
                      color: result === 'win' ? '#00FF7F' : result === 'lose' ? '#FF4D4D' : '#fff',
                      fontWeight: 900,
                      fontSize: 64,
                      letterSpacing: 2,
                      textTransform: 'uppercase',
                      display: 'block',
                      marginBottom: 32,
                    }}
                    className={`_signalResultText_1yk8r_198 ${result === 'win' ? '_win_1yk8r_206' : result === 'lose' ? '_lose_1yk8r_207' : '_neutral_1yk8r_208'}`}
                  >
                    {result === 'win' && 'WIN'}
                    {result === 'lose' && 'LOSE'}
                    {result === 'neutral' && 'NEUTRAL'}
                  </span>
                  <div style={{ maxWidth: 520, margin: '0 auto' }}>
                    <div
                      style={{
                        background: '#181818',
                        borderRadius: 32,
                        padding: '18px 36px',
                        display: 'flex',
                        alignItems: 'center',
                        fontSize: 22,
                        fontWeight: 600,
                        marginBottom: 18,
                        color: '#fff',
                      }}
                    >
                      <svg width="24" height="24" style={{ marginRight: 12 }} viewBox="0 0 24 24" fill="none"><path d="M4 12L10 18L20 6" stroke="#00FF7F" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>
                      <span style={{ marginRight: 12 }}>–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:</span>
                      <span style={{ color: '#00FF7F', fontWeight: 700, marginLeft: 'auto', display: 'flex', alignItems: 'center' }}>
                        <svg width="15" height="13" viewBox="0 0 15 13" fill="none" style={{ marginRight: 6 }}><path d="M7.5 0L14.8612 12.75H0.138784L7.5 0Z" fill="#00FF7F"/></svg>
                        ${startPrice}
                      </span>
                    </div>
                    <div
                      style={{
                        background: '#181818',
                        borderRadius: 32,
                        padding: '18px 36px',
                        display: 'flex',
                        alignItems: 'center',
                        fontSize: 22,
                        fontWeight: 600,
                        color: '#fff',
                      }}
                    >
                      <svg width="24" height="24" style={{ marginRight: 12 }} viewBox="0 0 24 24" fill="none"><circle cx="12" cy="12" r="10" stroke="#FF4D4D" strokeWidth="2"/><path d="M12 6V12L15 15" stroke="#FF4D4D" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>
                      <span style={{ marginRight: 12 }}>–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</span>
                      <span style={{ color: result === 'win' ? '#00FF7F' : '#FF4D4D', fontWeight: 700, marginLeft: 'auto', display: 'flex', alignItems: 'center' }}>
                        <svg width="15" height="13" viewBox="0 0 15 13" fill="none" style={{ marginRight: 6, transform: result === 'win' ? 'rotate(180deg)' : 'none' }}>
                          <path d="M7.5 0L14.8612 12.75H0.138784L7.5 0Z" fill={result === 'win' ? '#00FF7F' : '#FF4D4D'}/>
                        </svg>
                        ${endPrice}
                      </span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
          <div className='_getContainer_1yk8r_16'>
            <button
              type='button'
              className='_button_13fxj_1 _common_13fxj_28'
              onClick={handleResetSignal}
            >
              <span>–°–±—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª</span>
            </button>
          </div>
        </div>
      </section>
    );
  }

  return (
    <>
      <section className='_wrapper_hq2vv_1'>
        <div className='_container_hq2vv_8 _wrapper_18eu1_1'>
          <div className='_signalVideo_1yk8r_1'>
            <video src={loadingbot} autoPlay muted loop className='_video_1yk8r_12'></video>
          </div>
          <div className='_wrapper_1t4y8_1'>
            <h1 className='_mainTitle_1t4y8_6'>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–∞</h1>
            <div className='_listWrapper_1t4y8_12'>
              <h2>AI:</h2>
              <div className='_list_1t4y8_12'>
                {[{ name: 'ChatGPT 4o', icon: gpt }, { name: 'AI BOOST USA v1', icon: AIB }, { name: 'AI BOOST USA v2', icon: AIB2 }, { name: 'Indicators + ChatGPT 3.5', icon: IND }, { name: 'AI BOOST USA Trade PLUS', icon: PLUSA }].map((ai, index) => (
                  <button
                    key={index}
                    className={selectedAI === ai.name ? '_selected_1t4y8_46' : ''}
                    onClick={() => handleAISelection(ai.name)}
                  >
                    <img src={ai.icon} alt={ai.name} style={{ width: '15px' }} />
                    {ai.name}
                  </button>
                ))}
              </div>
            </div>
            <div className='_listWrapper_1t4y8_12'>
              <h2>TIME:</h2>
              <div className='_list_1t4y8_12'>
                {['3 MIN', '5 MIN', '7 MIN', '10 MIN'].map((time, index) => (
                  <button
                    key={index}
                    className={selectedTime === time ? '_selected_1t4y8_46' : ''}
                    onClick={() => handleTimeSelection(time)}
                  >
                    {time}
                  </button>
                ))}
              </div>
            </div>
          </div>
          <div className='_desktopPendingWrapper_1yk8r_400'>
            <div className='_getContainer_1yk8r_16'>
              <button
                type='button'
                className='_button_13fxj_1 _action_13fxj_13'
                onClick={handleNewSignal}
                disabled={!selectedAI || !selectedTime}
              >
                <span>–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª</span>
                <img src={click} alt="click" />
              </button>
            </div>
          </div>
        </div>
        <ToastContainer />
      </section>
    </>
  );
};

export default Signal;